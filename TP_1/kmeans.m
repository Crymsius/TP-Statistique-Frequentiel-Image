%image Iglobal I = double(imread('../Data/flower1.jpg'));I2 = double(imread('../TP_2/regression_data/keble_a.jpg'));%getYfunction Y = getY(X, K)% X : image reshaped% Y : K lignes, RGB colones  rmin = min(X(:,1));  rmax = max(X(:,1));  gmin = min(X(:,2));  gmax = max(X(:,2));  bmin = min(X(:,3));  bmax = max(X(:,3));  Y = rand (K, size(X,2));  Y = [(Y(:,1)*(rmax-rmin)+rmin) (Y(:,2)*(gmax-gmin)+gmin) (Y(:,3)*(bmax-bmin)+bmin)];end%distancefunction dist = distance(A,B)%A et B, vecteurs (r,g,b)  dist = (B(:,1)-A(:,1)).^2 + (B(:,2)-A(:,2)).^2 + (B(:,3)-A(:,3)).^2;end%findNearestfunction nearestLabel = findNearestLabel(X, Y, K)% X: image reshaped% Y: matrice des classes% K: nbr de classes  v = zeros(size(X,1),K);  for i = 1 : K    v(:,i) = distance(X, Y(i,:));  end  [val, nearestLabel] = min(v,[],2); %fait nearest = indice du min(v) (soit le label)end%mykmeans :function [labels, centroids] = mykmeans(img, ncluster, niter)%img: image en double%ncluster: nombre de clusters%niter: nombre d'iterations%centroids: matrice ncluster x 3 où chaque ligne est un centroid%labels: image d' un seul canal dont la valeur est le label attribué au pixel    X = reshape (img, size(img,1)*size(img,2), 3); %X : (nbr de ligne = pixels, 3 colones : RGB)  Y = getY(X, ncluster); % matrice RGB du nbr de clusters  labels = X(:,1);    for a = 1 : niter    %pour tous les pixels    labels = findNearestLabel(X,Y, ncluster);    for k = 1 : ncluster      ind = find(labels == k); %vecteur des indices des lignes de label k      if size(ind,1) == 0        disp('error classe vide');               return;      end      Y(k,:) = mean(X(ind,:));    end  end  labels = reshape (labels, [size(img,1) size(img,2) 1]);  centroids = Y;endfunction result = displayLabels (labels, centroids, image)  labels = reshape (labels, size(labels,1)*size(labels,2),1);   result = reshape (image, size(image,1)*size(image,2),3);  for k = 1 : size(centroids,1)    ind = find(labels == k);    for c = 1:3         result(ind,c) = centroids(k,c);    end  end  result = reshape (result, [size(image,1) size(image,2) 3]);end[labels centroids] = mykmeans(I,4,40);imageKmeans = displayLabels(labels,centroids,I);imshow (uint8(imageKmeans));