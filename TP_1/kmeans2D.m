%vecteur (X), nombre de la classe Kglobal X = load('../Data/gmm2d.asc');%distance2Dfunction dist = distance2D(A,B) %A et B, vecteurs (x,y)  dist = (B(:,1)-A(:,1)).^2 + (B(:,2)-A(:,2)).^2;end%findNearest2Dfunction nearestLabel = findNearestLabel2D(X, Y, K) %X: vecteur (x,y), Y matrice de vecteurs  v = 1 : K;  for j = 1 : K    v(:,j) = distance2D(X, Y(j,:));  end    [val, nearestLabel] = min(v); %fait nearest = indice du min(v) (soit le label)end%findNearestLabel(X(1,:),Y,K)%mykmeans2D :%img: image en double%ncluster: nombre de clusters%niter: nombre d'iterations%centroids: matrice ncluster x 3 où chaque ligne est un centroid%labels: image d' un seul canal dont la valeur est le label attribué au pixelfunction [labels, centroids] = mykmeans2D(img, ncluster, niter)  centroids = zeros(ncluster, size(img,2));  X = img;  W = img(:,1);    % setup de Y  Y = rand (ncluster, size(img,2)); %size de x,2 pour le nombre de colones  xmin = min(X(:,1));  xmax = max(X(:,1));  ymin = min(X(:,2));  ymax = max(X(:,2));  Y = [(Y(:,1)*(xmax-xmin) + xmin) (Y(:,2)*(ymax-ymin)+ ymin)];  for a = 1 : niter    for i = 1 : size(img,1)      W(i) = findNearestLabel2D(img(i,:),Y, ncluster);    end    for k = 1 : ncluster      ind = find(W == k); %vecteur des indices des lignes de label k      Y(k,1) = sum(X(ind,1)) / size(ind,1);      Y(k,2) = sum(X(ind,2)) / size(ind,1);    end  end  centroids = Y;    hold on;  ind = find(W.' == 1);  plot(X(ind,1),X(ind,2),'.b');  ind = find(W.' == 2);  plot(X(ind,1),X(ind,2),'.g');  ind = find(W.' == 4);  plot(X(ind,1),X(ind,2),'.r');  ind = find(W.' == 3);  plot(X(ind,1),X(ind,2),'.c');end%[labels centroids] = mykmeans2D(X,4,5);